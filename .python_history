exit
exit()
3333**22
3333**2222
3333**22222
3333**22**565
2**30
2**32
print(
'this is a text line...')
2 >> 2
398 >> 2
>> 
exit()
print(solve('x', (('a', '*', 'x'), '=', 'c')))
debug = True
print(solve('x', (('a', '*', 'x'), '=', 'c')))
print(solve('c', (('a', '*', 'x'), '=', 'c')))
print(solve('a', (('a', '*', 'x'), '=', 'c')))
print(solve('x', (('a', '*', 'x'), '=', 'c')))
print(solve('a', (('b', '+', 'c'), '=', ('d', '*', (('a', '/', 'e'), '-', 'f')))))
help('modules')
2**38
e + 2
'e' + 2
"e" + 2
chr('2')
ord('a')
ord('k')
chr(107)
chr(107 + 2)
ord(' ')
ord('a')
97 % 100
100 % 97
ord('a')
97 % 100
97 % 98
97 % 2
97 % 1000
100 % 97
98  % 97
a = []
a[0] = 2
a.append(2)
a[1]
a(1)
a
a[0[
d
a[0]
a = ['']
a[0] += 'p'
a
encode('text.txt')
decode('text.txt')
encode('text.py')
encode('text.txt')
decode('text.txt'
)
for i in range(1000):
	print(chr(i))
for i in range(1000):
	print(i, ':', chr(i))
encode('text.txt')
2**38
createDir('/home/julien/Desktop/Test_Area/New_Directory')
for i in range(10):
	createDir(str(i))
for i in range(10):
	createDir('/home/julien/Desktop/Test_Area/' + str(i))
import codecs, os;__pyfile = codecs.open('''/tmp/py8766CFU''', encoding='''utf-8''');__code = __pyfile.read().encode('''utf-8''');__pyfile.close();os.remove('''/tmp/py8766CFU''');exec(compile(__code, '''/tmp/py8766CFU''', 'exec'));
2**38
4*(1-(1/2))*(1-(1/2))*(1-(1/5))*(1-(1/5))
100*(1-(1/2))*(1-(1/2))*(1-(1/5))*(1-(1/5))
100*(1-(1/2))*(1-(1/5))
100*(1-(1/1))*(1-(1/1))*(1-(1/4))*(1-(1/4))
625 % 8
#11, 7
(11**(7 - 1)) % 7
(23**(7 - 1)) % 7
(24**(7 - 1)) % 7
(24**(6 - 1)) % 7
primeFact(10)
10
pf(10)
pf(2
)
pf(10)
pf(100)
pf(10)
pf(100)
pf(1000)
pf(77)
pf(832)
pf(33)
pf(10)
math.sqrt(1)
math.sqrt(10)
pf(10)
10
pf(10)
pf(100)
phi(100)
encrypt(89)
phi([53,59])
p([53,59])
phi([53,59])
phi([53.0,59.0])
phi([53,59])
pf(100)
phi([2, 5])
phiUknown(100)
pf(100)
phi([53,59])
encrypt(89)
enc(89)
dec(1394)
enc(89)
dec(1394)
1394 ** 2011
phi([53,59])
phi = phi([53,59])
p = phi([53,59])
pr = phi([53,59])
a = int(12)
a
a ** 34242
a = phi([53, 59])
ls
a
enc(89)
1394**((2*a + 1)/3)
1394**((2*a + 1))
1394**((2*a + 1)/3)
1394**((2*3016 + 1)/3)
b = ((2*3016 + 1)/3)
b
a**b
a = int(a)
b = int(b)
a
a**b
enc(89)
dec(1394)
enc(3211)
a = 111333
enc(a)
dec(a)
dec(1593)
a = 31
enc(a)
dec(1648)
enc(89)
dec =(1394)
print(dec(1394))
dec(2)
dec(422)
p = enc(89)
p
dec(p)
p = enc(123432343)
p
dec(p)
21481*21487
enc(89)
p = enc(89)
dec(p)
phi([21481, 21487])
p
ph = phi([21481, 21487])
c ** phi
p ** phi
p
phi
ph
p ** ph
for i in range(100):
	print(i*i)
~0
1 == 1
~0 == -1
9 >> 31
321321 >> 31
321321 >> 3
321321 >> 2
321321 >> 4
321321 >> 5
321321 >> 6
321321 >> 7
321321 >> 8
321321 >> 16
321321 >> 17
321321 >> 18
321321 >> 19
def fb(x, y):
	mask = x >> 31
	return !(((~x & mask) + (x & ~mask) >> (n - 1))
!0
!3210
!(3210)
not 19
not 0
def fb(x, y):
	mask = x >> 31
	return not(((~x & mask) + (x & ~mask) >> (n - 1))
fb(5,3)
reverse(0x01020304)
format((0x01020304 >> 24), '#04x)
format((0x01020304 >> 24), '#04x')
format((0x01020304 >> 16), '#04x')
format((0x01020304 >> 8), '#04x')
format((0x01020304 >> 8 & 0xff), '#04x')
format((0x01020304 >> 16 & 0xff), '#04x')
hex(12)
hex(0x33)
hew((0x01020304 >> 16 & 0xff))
hex((0x01020304 >> 16 & 0xff))
format((0x01020304 >> 16 & 0xff), '#04x')
five8(77)
five(77)
five8(77)
five8(80)
five8(21312)
five8(213112321321312321321321312)
five8(213112321321312321321321312123213213213213213123123123)
p = 213213213213213
p = five8(p); print(p);
1 + 1
for i in range(11):
	print(i)
sum = 0
for i in range(11):
	sum += i
sum
for i in range(100000):
	sum += i
sum
for i in range(100000):
for i in range(100001):
	sum += i
sum =0
for i in range(100001):
	sum += i
sum
format((0x80 >> 24), '#04x')
z = Zillion('00000')
print(z.isZero)
z = Zillion('00000')
print(z.isZero)
print(z.toString())
print(z.isZero())
z = Zillion('00000')
print(z.isZero())
z.increment()
z.toString()
z = Zillion('00000')
z.toString()
print(z.isZero())
z = Zillion('00030')
print(z.isZero())
z = Zillion('00030')
print(z.isZero())
z = Zillion('')
try:
  z = Zillion('')
except RuntimeError:
  print('Empty string')
try:
  z = Zillion('1+0')
except RuntimeError:
  print('Non-digit in the string')
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed'
)
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
digits
d = '00 00'
d = d.replace(' ', '')
d
try:
  z = Zillion('')
except RuntimeError:
  print('Empty string')
# It must print 'Empty string' without apostrophes. 2 points.
try:
  z = Zillion(' , ')
except RuntimeError:
  print('No digits in the string')
# It must print 'No digits in the string' without apostrophes. 2 points.
try:
  z = Zillion('1+0')
except RuntimeError:
  print('Non-digit in the string')
# It must print 'Non-digit in the string' without apostrophes. 2 points.
try:
  z = Zillion('0')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000000000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
try:
  z = Zillion('')
except RuntimeError:
  print('Empty string')
# It must print 'Empty string' without apostrophes. 2 points.
try:
  z = Zillion(' , ')
except RuntimeError:
  print('No digits in the string')
# It must print 'No digits in the string' without apostrophes. 2 points.
try:
  z = Zillion('1+0')
except RuntimeError:
  print('Non-digit in the string')
# It must print 'Non-digit in the string' without apostrophes. 2 points.
try:
  z = Zillion('0')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000000000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('997')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing.  2 points.
print(z.isZero())    #  It must print False. 2 points.
print(z.toString())  #  It must print 997. 2 points.
z.increment()
print(z.toString())  #  It must print 998. 2 points.
z.increment()
print(z.toString())  #  It must print 999. 2 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
try:
  z = Zillion('0 9,9 9')
except:
  print('This must not be printed')
#  It must print nothing.  3 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
try:
  z = Zillion('')
except RuntimeError:
  print('Empty string')
# It must print 'Empty string' without apostrophes. 2 points.
try:
  z = Zillion(' , ')
except RuntimeError:
  print('No digits in the string')
# It must print 'No digits in the string' without apostrophes. 2 points.
try:
  z = Zillion('1+0')
except RuntimeError:
  print('Non-digit in the string')
# It must print 'Non-digit in the string' without apostrophes. 2 points.
try:
  z = Zillion('0')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000000000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('997')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing.  2 points.
print(z.isZero())    #  It must print False. 2 points.
print(z.toString())  #  It must print 997. 2 points.
z.increment()
print(z.toString())  #  It must print 998. 2 points.
z.increment()
print(z.toString())  #  It must print 999. 2 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
try:
  z = Zillion('0 9,9 9')
except:
  print('This must not be printed')
#  It must print nothing.  3 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
#
#  TESTS. Test the class Zillion for CSci 1913 Lab 2.
#
#    James Moen
#    30 Jan 17
#
#  Every test is followed by a comment which shows what must be printed if your
#  code works correctly. It also shows how many points the test is worth, for a
#  total of nn possible points.
#
try:
  z = Zillion('')
except RuntimeError:
  print('Empty string')
# It must print 'Empty string' without apostrophes. 2 points.
try:
  z = Zillion(' , ')
except RuntimeError:
  print('No digits in the string')
# It must print 'No digits in the string' without apostrophes. 2 points.
try:
  z = Zillion('1+0')
except RuntimeError:
  print('Non-digit in the string')
# It must print 'Non-digit in the string' without apostrophes. 2 points.
try:
  z = Zillion('0')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000000000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('000 000 000')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing. 2 points.
print(z.isZero())    #  It must print True. 2 points.
try:
  z = Zillion('997')
except RuntimeError:
  print('This must not be printed')
#  It must print nothing.  2 points.
print(z.isZero())    #  It must print False. 2 points.
print(z.toString())  #  It must print 997. 2 points.
z.increment()
print(z.toString())  #  It must print 998. 2 points.
z.increment()
print(z.toString())  #  It must print 999. 2 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
try:
  z = Zillion('0 9,9 9')
except:
  print('This must not be printed')
#  It must print nothing.  3 points.
z.increment()
print(z.toString())  #  It must print 1000. 2 points.
print a
print(a_
)
print(a)
print(list(map(sqrt,a)))
a
print(list(map((lambda x: x**2), a)))
most((lambda x: x%2), range(10))
10 / 2
most((lambda x: x%2), [])
most((lambda x: x%2), [1])
most((lambda x: x%2), [1, 2])
most((lambda x: x%2), [1, 2, 3])
sigma((lambda x: x**2), 0, 4)
sigma((lambda x: x**2), 0, 1)
sigma((lambda x: x**2), 0, 2)
sigma((lambda x: x**2), 0, 3)
sigma((lambda x: x**2), 0, 4)
sigma((lambda x: x**2), 0, 5)
sigma((lambda x: x**2), 2, 100)
#  ODD. Assume N is an integer. Test if N is odd.
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, [1, 2, 3]))  #  True     2 points
#  SQR. Assume N is a number. Return N times N.
def sqr(N):
  return N * N
print(sigma(sqr, 0, 0))    #  0          2 points
print(sigma(sqr, 1, 0))    #  0          2 points
print(sigma(sqr, 0, 4))    #  30         2 points
print(sigma(sqr, 1, 1))    #  1          2 points
print(sigma(sqr, 2, 100))  #  338349     2 points
a = range(10)
a
list(a)
filter((lambda x: x % 2, a))
filter(((lambda x: x % 2), a))
filter((lambda x: x % 2), a))
filter((lambda x: x % 2), a)))
filter((lambda x: x % 2), a)
filter((lambda x: x % 2), list(a))
list(filter((lambda x: x % 2), list(a)))
list(filter((lambda x: x % 2), a))
list(filter((lambda x: x % 2), list(rang(10))))
list(filter((lambda x: x % 2), list(range(10))))
list(myFilter((lambda x: x % 2), list(range(10))))
list(myFilter((lambda x: x % 2), range(10)))
list(myFilter((lambda x: x % 2), [1,2,3,4,5]))
list(3)
9 + [1,2,3]
[9] + [1,2,3]
list(myFilter((lambda x: x % 2), [1,2,3,4,5]))
list(myMap((lambda x: x**2), [1,2,3,4,5]))
if 1:
	print(True)
list(myReduce((lambda x, y: x + y), [1,2,3,4,5]))
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, [1, 2, 3]))  #  True     2 points
#  SQR. Assume N is a number. Return N times N.
def sqr(N):
  return N * N
print(sigma(sqr, 0, 0))    #  0          2 points
print(sigma(sqr, 1, 0))    #  0          2 points
print(sigma(sqr, 0, 4))    #  30         2 points
print(sigma(sqr, 1, 1))    #  1          2 points
print(sigma(sqr, 2, 100))  #  338349     2 points
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, [1, 2, 3]))  #  True     2 points
print(myReduce((lambda x,y: x*y), [1,2,3,4]))
print(myReduce((lambda x,y: x*y), [1,2,3,4], 0))
def mult(x,y):
	return x * y
mult(4, 8)
print(myReduce((mult, [1,2,3,4], 0))
)
print(myReduce((mult, [1,2,3,4], 0)))
print(myReduce((mult, range(-5,5) , 0))
)
print(myReduce((mult, range(-5,5) , 0)))
print(myReduce(mult, range(-5,5) , 0))
print(myReduce(mult(), range(-5,5), 0))
print(reduce(mult(), range(-5,5), 0))
print(reduce(mult(x,y), range(-5,5), 0))
print(reduce(mult, range(-5,5), 0))
print(reduce(mult, range(,5), 0))
print(reduce(mult, range(5), 0))
print(reduce(mult, range(1,5), 0))
print(reduce(mult, range(1,5)))
print(myReduce(mult, range(1,5), 0))
print(myReduce(mult, [1, 2, 3, 4], 0))
print(myReduce(mult, [1, 2, 3, 4, 5, 6,], 0))
print(myReduce(mult, [1, 2, 3, 4, 5, 6], 0))
print(myReduce(mult, [1, 2, 3, 4, 5, 6, 7], 0))
print(myReduce(mult, [1, 2, 3], 0))
print(myReduce(mult, [1, 2, 3, 4, 5,6 ], 0))
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
def odd(N):
  return N % 2 != 0
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, [1, 2, 3]))  #  True     2 points
#  SQR. Assume N is a number. Return N times N.
def sqr(N):
  return N * N
print(sigma(sqr, 0, 0))    #  0          2 points
print(sigma(sqr, 1, 0))    #  0          2 points
print(sigma(sqr, 0, 4))    #  30         2 points
print(sigma(sqr, 1, 1))    #  1          2 points
def sqr(N):
  return N * N
print(sigma(sqr, 0, 0))    #  0          2 points
print(sigma(sqr, 1, 0))    #  0          2 points
print(sigma(sqr, 0, 4))    #  30         2 points
print(sigma(sqr, 1, 1))    #  1          2 points
print(sigma(sqr, 2, 100))  #  338349     2 points
def odd(N):
  return N % 2 != 0
print(most(odd, []))         #  False    2 points
print(most(odd, [0]))        #  False    2 points
print(most(odd, [1]))        #  True     2 points
print(most(odd, [1, 2]))     #  False    2 points
print(most(odd, [1, 2, 3]))  #  True     2 points
#  SQR. Assume N is a number. Return N times N.
def sqr(N):
  return N * N
print(sigma(sqr, 0, 0))    #  0          2 points
print(sigma(sqr, 1, 0))    #  0          2 points
print(sigma(sqr, 0, 4))    #  30         2 points
print(sigma(sqr, 1, 1))    #  1          2 points
print(sigma(sqr, 2, 100))  #  338349     2 points
for i in range(97, 97 + 26):
	print("\'" + char(i) + "\' : \'\'")
char(3)
chr(3)
chr(97)
for i in range(97, 97 + 26):
	print("\'" + chr(i) + "\' : \'\'")
	print("\'" + chr(i) + "\' : \'\', " end='')
for i in range(97, 97 + 26):
	print("\'" + chr(i) + "\' : \'\', " end='')
for i in range(97, 97 + 26):
	print("\'" + chr(i) + "\' : \'\', ")
chr(97 + 27)
chr(97 + 26)
chr(97 + 25)
chr(97 -1)
for i in range (200):
	print(chr(i))
chr(97 + 25
)
chr(97
)
a = Mnemonic(100)
a = {}
a.update(3)
a.update('a')
a.update('ad')
a.update('a':'')
a.update('a'='')
a.update({'a':''})
a
a = Mnemonic(100)
a
follow
a.follow
a = Mnemonic(100)
a.follow
a = Mnemonic(100); a.follow
a.numbers
r = Random(101)
r.next()
r.next(10)
r = Random(101); r.next(100)
r.next(100)
a = Random(100)
a.choose('abc')
l = 'abc'
len(l)
l[2]
next(len(l))
next(3)
a = 
r
a = Random(100)
a.letters('abc')
a.choose('abc')
a.next(10)
a.next(100)
b = Random(10023)
b.next(33)
b.next(3)
a = Random(100)
a.next(50)
a.choose('abcdefghijklmnopqrstuwxyz')
for i in range(100):
	print(a.choose('abcdefghijklmnopqrstuwxyz'))
a = Mnemonic(100)
a.follow
a.add('This')
a.follow
a.add('This')
a = Mnemonic(100)
a.add('This')
a.follow
for i,j in enumerate(word):
	
for i,j in enumerate('abc'):
	print(j)
for i,j in enumerate('abc'):
	print(i)
for i,j in enumerate('abc'):
for i,j in enumerate():
a.follow['a'] = 'v'
a.follow
a.follow['a'] = 'q'
a.follow
a.follow['a'] = 'v'
a.follow
a.follow({'a':'q'})
a.follow.update({'a':'q'})
a.follow
a.follow.update({'a':'u'})
a.follow
a.follow['a']
a.follow['a'] + 'q'
a = Mnemonic(100)
a.add('abcdefghi')
a.follow
a = Mnemonic(100); a.add('abcdefg')
a.follow
a = Mnemonic(100); a.add('abcdefg');a.follow
a = Mnemonic(100); a.add('aaadfsjjfdshufgisnfdsagfyusdahfjsdahufdsauihsdfdfgusdahfhgdvfbadsfsdtfiuobsdhaufgasdyhfhasbdfgsdabicfhudvficbgyfubtidbgayubgfiasbgfubfhibsagfasbfgui');a.follow
a = Mnemonic(100)
m.add('about')  
m.add('after')  
m.add('again')  
m.add('always')  
m.add('an')  
                  ⋮  
m.add('would')  
m.add('write')  
m.add('yellow')  
m.add('you')  
m = Mnemonic(100)
m.add('about')  
m.add('after')  
m.add('again')  
m.add('always')  
m.add('an')  
                  ⋮  
m.add('would')  
m.add('write')  
m.add('yellow')  
m.add('you')  
m.add('your')
f.follow
m.follow
a = 123455
a % 10
a %= 10
a = {1:'abc', 2:'xyz'}
a
a[1].remove(a)
a[1].replace('a','')
a[1]
m = Mnemonic(10232)
m.add('about')
m.add('after')
m.add('again')
m.add('always')
m.add('an')
m.add('and')
m.add('any')
m.add('apple')
m.add('around')
m.add('as')
m.add('ask')
m.add('away')
m.add('baby')
m.add('back')
m.add('ball')
m.add('bear')
m.add('because')
m.add('bed')
m.add('been')
m.add('before')
m.add('bell')
m.add('best')
m.add('better')
m.add('big')
m.add('bird')
m.add('birthday')
m.add('blue')
m.add('boat')
m.add('both')
m.add('box')
m.add('boy')
m.add('bread')
m.add('bring')
m.add('brother')
m.add('buy')
m.add('by')
m.add('cake')
m.add('call')
m.add('can')
m.add('car')
m.add('carry')
m.add('cat')
m.add('chair')
m.add('chicken')
m.add('children')
m.add('christmas')
m.add('claus')
m.add('clean')
m.add('coat')
m.add('cold')
m.add('come')
m.add('corn')
m.add('could')
m.add('cow')
m.add('cut')
m.add('day')
m.add('does')
m.add('dog')
m.add('doll')
m.add('done')
m.add('dont')
m.add('door')
m.add('down')
m.add('draw')
m.add('drink')
m.add('duck')
m.add('egg')
m.add('eight')
m.add('every')
m.add('eye')
m.add('fall')
m.add('far')
m.add('farm')
m.add('farmer')
m.add('fast')
m.add('father')
m.add('feet')
m.add('find')
m.add('fire')
m.add('first')
m.add('fish')
m.add('five')
m.add('floor')
m.add('flower')
m.add('fly')
m.add('for')
m.add('found')
m.add('from')
m.add('full')
m.add('funny')
m.add('game')
m.add('garden')
m.add('gave')
m.add('girl')
m.add('give')
m.add('giving')
m.add('go')
m.add('goes')
m.add('goodbye')
m.add('got')
m.add('grass')
m.add('green')
m.add('ground')
m.add('grow')
m.add('had')
m.add('hand')
m.add('has')
m.add('head')
m.add('help')
m.add('her')
m.add('here')
m.add('hill')
m.add('him')
m.add('his')
m.add('hold')
m.add('home')
m.add('horse')
m.add('hot')
m.add('house')
m.add('how')
m.add('hurt')
m.add('if')
m.add('in')
m.add('is')
m.add('it')
m.add('its')
m.add('jump')
m.add('just')
m.add('keep')
m.add('kind')
m.add('kitty')
m.add('know')
m.add('laugh')
m.add('leg')
m.add('let')
m.add('letter')
m.add('light')
m.add('little')
m.add('live')
m.add('long')
m.add('look')
m.add('made')
m.add('make')
m.add('man')
m.add('many')
m.add('may')
m.add('me')
m.add('men')
m.add('milk')
m.add('money')
m.add('morning')
m.add('mother')
m.add('much')
m.add('my')
m.add('myself')
m.add('name')
m.add('nest')
m.add('never')
m.add('night')
m.add('not')
m.add('of')
m.add('off')
m.add('old')
m.add('once')
m.add('one')
m.add('only')
m.add('open')
m.add('or')
m.add('over')
m.add('own')
m.add('paper')
m.add('party')
m.add('pick')
m.add('picture')
m.add('pig')
m.add('play')
m.add('pull')
m.add('put')
m.add('rabbit')
m.add('rain')
m.add('read')
m.add('red')
m.add('right')
m.add('ring')
m.add('robin')
m.add('round')
m.add('run')
m.add('said')
m.add('santa')
m.add('school')
m.add('see')
m.add('seed')
m.add('seven')
m.add('shall')
m.add('sheep')
m.add('shoe')
m.add('show')
m.add('sing')
m.add('sister')
m.add('sit')
m.add('six')
m.add('sleep')
m.add('small')
m.add('snow')
m.add('some')
m.add('song')
m.add('squirrel')
m.add('start')
m.add('stick')
m.add('stop')
m.add('street')
m.add('sun')
m.add('table')
m.add('take')
m.add('tell')
m.add('ten')
m.add('thank')
m.add('the')
m.add('their')
m.add('them')
m.add('then')
m.add('these')
m.add('thing')
m.add('think')
m.add('those')
m.add('three')
m.add('time')
m.add('to')
m.add('today')
m.add('together')
m.add('top')
m.add('toy')
m.add('tree')
m.add('try')
m.add('two')
m.add('up')
m.add('upon')
m.add('us')
m.add('use')
m.add('very')
m.add('walk')
m.add('warm')
m.add('wash')
m.add('watch')
m.add('water')
m.add('way')
m.add('we')
m.add('were')
m.add('when')
m.add('where')
m.add('which')
m.add('why')
m.add('wind')
m.add('window')
m.add('wish')
m.add('wood')
m.add('work')
m.add('would')
m.add('write')
m.add('yellow')
m.add('you')
m.add('your')
m.follow
m.make(12)
83**33231
74248**32
74248**3232
2^321432
2^3214324234235
2^3214324234235242342345645646453543263462
2**3214324234235242342345645646453543263462
2**32143
LS
ks
ls
s = "abc123cde"
s.contain('123')
s.contains('123')
s.contains("123")
s.contain("123")
"123" in s
a = {} # This is a dictionary
b = () # This is a list
c = [] # This is an array
import types
if type((1,2)) == type.TupleType
a = {'a':1, 'b':2, 'c':3}
a[b]
a['b']
a['d'] = 4
ls
a 
list(a)
print a
print(a)
a = [1,2,3,4]
b = tuple(a)
b
a = 'df
a = 'abc'
a.isaplha()
isalpha(a)
z = Zillion(123)
z = Zillion('123')
z
z.toString()
z.increment()
for i in range(1000):
	z.increment()
z.number
d
b
hel
cb = Cleverbot('my-app')
response
a = CleverbotTest()
a.test_replay()
cava
900000000/2000
60*60*24
ls
ord(123
18 % 10
